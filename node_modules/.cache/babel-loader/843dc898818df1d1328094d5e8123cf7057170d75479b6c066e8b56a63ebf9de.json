{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdul.mohammed\\\\Downloads\\\\forTesting\\\\testing-app\\\\src\\\\components\\\\Checkout.jsx\";\nimport { render, screen, fireEvent, act } from '@testing-library/react';\nimport Checkout from './Checkout';\nimport CartContext from './store/CartContext';\nimport UserProgressContext from './store/UserProgressContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndescribe('Checkout Component', () => {\n  it('renders the Checkout modal when userProgressCtx.progress is checkout', () => {\n    const mockCartValue = {\n      items: [],\n      // Mock items as needed for your test\n      clearCart: jest.fn()\n    };\n    const mockUserProgressValue = {\n      progress: 'checkout',\n      hideCheckout: jest.fn(),\n      orderSuccess: jest.fn()\n    };\n    render( /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n      value: mockCartValue,\n      children: /*#__PURE__*/_jsxDEV(UserProgressContext.Provider, {\n        value: mockUserProgressValue,\n        children: /*#__PURE__*/_jsxDEV(Checkout, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this));\n\n    // Assert that the Checkout modal is rendered based on the 'checkout' progress\n    const checkoutModal = screen.getByRole('dialog');\n    expect(checkoutModal).toBeInTheDocument();\n\n    // Add more specific assertions as needed based on the content inside the modal\n    expect(screen.getByText('Checkout')).toBeInTheDocument();\n    expect(screen.getByLabelText('Full Name')).toBeInTheDocument();\n    // ... other assertions for form elements, buttons, etc.\n  });\n  it('submits order when the form is submitted', async () => {\n    const mockCartValue = {\n      items: [\n      // Mock items as needed for your test\n      {\n        id: 1,\n        quantity: 2,\n        price: 10\n      } // Sample item for testing\n      ],\n      clearCart: jest.fn()\n    };\n    const mockUserProgressValue = {\n      progress: 'checkout',\n      hideCheckout: jest.fn(),\n      orderSuccess: jest.fn()\n    };\n    global.fetch = jest.fn(() => Promise.resolve({\n      json: () => Promise.resolve({}) // Mock the response JSON as needed\n    }));\n    render( /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n      value: mockCartValue,\n      children: /*#__PURE__*/_jsxDEV(UserProgressContext.Provider, {\n        value: mockUserProgressValue,\n        children: /*#__PURE__*/_jsxDEV(Checkout, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this));\n\n    // Simulate form submission\n    fireEvent.click(screen.getByText('Submit Order'));\n\n    // Wait for the fetch call to be resolved\n    await act(async () => {\n      await new Promise(resolve => setTimeout(resolve, 0));\n    });\n\n    // Expectations after submitting the form, e.g., API call, cart clearing, etc.\n    expect(global.fetch).toHaveBeenCalledWith('http://localhost:2023/orders', expect.objectContaining({\n      method: 'POST',\n      body: JSON.stringify({\n        order: {\n          items: mockCartValue.items,\n          customer: expect.any(Object) // Mock this customer data as needed\n        }\n      })\n    }));\n\n    // Assert that cart is cleared after the order submission\n    expect(mockCartValue.clearCart).toHaveBeenCalled();\n\n    // Assert that the orderSuccess function from UserProgressContext was called\n    expect(mockUserProgressValue.orderSuccess).toHaveBeenCalled();\n  });\n});","map":{"version":3,"names":["render","screen","fireEvent","act","Checkout","CartContext","UserProgressContext","jsxDEV","_jsxDEV","describe","it","mockCartValue","items","clearCart","jest","fn","mockUserProgressValue","progress","hideCheckout","orderSuccess","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","checkoutModal","getByRole","expect","toBeInTheDocument","getByText","getByLabelText","id","quantity","price","global","fetch","Promise","resolve","json","click","setTimeout","toHaveBeenCalledWith","objectContaining","method","body","JSON","stringify","order","customer","any","Object","toHaveBeenCalled"],"sources":["C:/Users/abdul.mohammed/Downloads/forTesting/testing-app/src/components/Checkout.jsx"],"sourcesContent":["import { render, screen, fireEvent, act } from '@testing-library/react';\r\nimport Checkout from './Checkout';\r\nimport CartContext from './store/CartContext';\r\nimport UserProgressContext from './store/UserProgressContext';\r\n\r\ndescribe('Checkout Component', () => {\r\n  it('renders the Checkout modal when userProgressCtx.progress is checkout', () => {\r\n    const mockCartValue = {\r\n      items: [], // Mock items as needed for your test\r\n      clearCart: jest.fn(),\r\n    };\r\n\r\n    const mockUserProgressValue = {\r\n      progress: 'checkout',\r\n      hideCheckout: jest.fn(),\r\n      orderSuccess: jest.fn(),\r\n    };\r\n\r\n    render(\r\n      <CartContext.Provider value={mockCartValue}>\r\n        <UserProgressContext.Provider value={mockUserProgressValue}>\r\n          <Checkout />\r\n        </UserProgressContext.Provider>\r\n      </CartContext.Provider>\r\n    );\r\n\r\n    // Assert that the Checkout modal is rendered based on the 'checkout' progress\r\n    const checkoutModal = screen.getByRole('dialog');\r\n    expect(checkoutModal).toBeInTheDocument();\r\n\r\n    // Add more specific assertions as needed based on the content inside the modal\r\n    expect(screen.getByText('Checkout')).toBeInTheDocument();\r\n    expect(screen.getByLabelText('Full Name')).toBeInTheDocument();\r\n    // ... other assertions for form elements, buttons, etc.\r\n  });\r\n\r\n  it('submits order when the form is submitted', async () => {\r\n    const mockCartValue = {\r\n      items: [\r\n        // Mock items as needed for your test\r\n        { id: 1, quantity: 2, price: 10 }, // Sample item for testing\r\n      ],\r\n      clearCart: jest.fn(),\r\n    };\r\n\r\n    const mockUserProgressValue = {\r\n      progress: 'checkout',\r\n      hideCheckout: jest.fn(),\r\n      orderSuccess: jest.fn(),\r\n    };\r\n\r\n    global.fetch = jest.fn(() =>\r\n      Promise.resolve({\r\n        json: () => Promise.resolve({}), // Mock the response JSON as needed\r\n      })\r\n    );\r\n\r\n    render(\r\n      <CartContext.Provider value={mockCartValue}>\r\n        <UserProgressContext.Provider value={mockUserProgressValue}>\r\n          <Checkout />\r\n        </UserProgressContext.Provider>\r\n      </CartContext.Provider>\r\n    );\r\n\r\n    // Simulate form submission\r\n    fireEvent.click(screen.getByText('Submit Order'));\r\n\r\n    // Wait for the fetch call to be resolved\r\n    await act(async () => {\r\n      await new Promise((resolve) => setTimeout(resolve, 0));\r\n    });\r\n\r\n    // Expectations after submitting the form, e.g., API call, cart clearing, etc.\r\n    expect(global.fetch).toHaveBeenCalledWith(\r\n      'http://localhost:2023/orders',\r\n      expect.objectContaining({\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          order: {\r\n            items: mockCartValue.items,\r\n            customer: expect.any(Object), // Mock this customer data as needed\r\n          },\r\n        }),\r\n      })\r\n    );\r\n\r\n    // Assert that cart is cleared after the order submission\r\n    expect(mockCartValue.clearCart).toHaveBeenCalled();\r\n\r\n    // Assert that the orderSuccess function from UserProgressContext was called\r\n    expect(mockUserProgressValue.orderSuccess).toHaveBeenCalled();\r\n  });\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}