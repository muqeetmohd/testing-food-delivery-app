{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdul.mohammed\\\\Downloads\\\\forTesting\\\\testing-app\\\\src\\\\components\\\\Checkout.jsx\";\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport Checkout from './Checkout';\nimport CartContext from './store/CartContext';\nimport UserProgressContext from './store/UserProgressContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndescribe('Checkout Component', () => {\n  it('renders the Checkout modal when userProgressCtx.progress is checkout', () => {\n    const mockCartValue = {\n      items: [],\n      // Mock items as needed for your test\n      addItem: jest.fn(),\n      removeItem: jest.fn(),\n      clearCart: jest.fn()\n    };\n    const mockUserProgressValue = {\n      progress: 'checkout',\n      hideCheckout: jest.fn(),\n      orderSuccess: jest.fn()\n    };\n    render( /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n      value: mockCartValue,\n      children: /*#__PURE__*/_jsxDEV(UserProgressContext.Provider, {\n        value: mockUserProgressValue,\n        children: /*#__PURE__*/_jsxDEV(Checkout, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this));\n\n    // Assert that the Checkout modal is rendered based on the 'checkout' progress\n    const checkoutModal = screen.getByRole('dialog');\n    expect(checkoutModal).toBeInTheDocument();\n\n    // Add more specific assertions as needed based on the content inside the modal\n    expect(screen.getByText('Checkout')).toBeInTheDocument();\n    expect(screen.getByLabelText('Full Name')).toBeInTheDocument();\n    // ... other assertions for form elements, buttons, etc.\n  });\n  it('submits order when the form is submitted', () => {\n    // Mock necessary functions and context values\n    const mockCartValue = {\n      items: [],\n      // Mock items as needed for your test\n      addItem: jest.fn(),\n      removeItem: jest.fn(),\n      clearCart: jest.fn()\n    };\n    const mockUserProgressValue = {\n      progress: 'checkout',\n      hideCheckout: jest.fn(),\n      orderSuccess: jest.fn()\n    };\n    render( /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n      value: mockCartValue,\n      children: /*#__PURE__*/_jsxDEV(UserProgressContext.Provider, {\n        value: mockUserProgressValue,\n        children: /*#__PURE__*/_jsxDEV(Checkout, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this));\n\n    // Simulate filling out the form and submitting it\n    fireEvent.change(screen.getByLabelText('Full Name'), {\n      target: {\n        value: 'John Doe'\n      }\n    });\n    // ... fill out other form fields as needed\n\n    fireEvent.click(screen.getByText('Submit Order'));\n\n    // Expectations after submitting the form, e.g., API call, cart clearing, etc.\n    // Mock API calls using jest.fn() and assert that they were called appropriately\n    // Assert that cart is cleared after the order submission\n    expect(mockCartValue.clearCart).toHaveBeenCalled();\n\n    // Assert that the orderSuccess function from UserProgressContext was called\n    expect(mockUserProgressValue.orderSuccess).toHaveBeenCalled();\n  });\n});","map":{"version":3,"names":["render","screen","fireEvent","Checkout","CartContext","UserProgressContext","jsxDEV","_jsxDEV","describe","it","mockCartValue","items","addItem","jest","fn","removeItem","clearCart","mockUserProgressValue","progress","hideCheckout","orderSuccess","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","checkoutModal","getByRole","expect","toBeInTheDocument","getByText","getByLabelText","change","target","click","toHaveBeenCalled"],"sources":["C:/Users/abdul.mohammed/Downloads/forTesting/testing-app/src/components/Checkout.jsx"],"sourcesContent":["import { render, screen, fireEvent } from '@testing-library/react';\r\nimport Checkout from './Checkout';\r\nimport CartContext from './store/CartContext';\r\nimport UserProgressContext from './store/UserProgressContext';\r\n\r\ndescribe('Checkout Component', () => {\r\n  it('renders the Checkout modal when userProgressCtx.progress is checkout', () => {\r\n    const mockCartValue = {\r\n      items: [], // Mock items as needed for your test\r\n      addItem: jest.fn(),\r\n      removeItem: jest.fn(),\r\n      clearCart: jest.fn(),\r\n    };\r\n\r\n    const mockUserProgressValue = {\r\n      progress: 'checkout',\r\n      hideCheckout: jest.fn(),\r\n      orderSuccess: jest.fn(),\r\n    };\r\n\r\n    render(\r\n      <CartContext.Provider value={mockCartValue}>\r\n        <UserProgressContext.Provider value={mockUserProgressValue}>\r\n          <Checkout />\r\n        </UserProgressContext.Provider>\r\n      </CartContext.Provider>\r\n    );\r\n\r\n    // Assert that the Checkout modal is rendered based on the 'checkout' progress\r\n    const checkoutModal = screen.getByRole('dialog');\r\n    expect(checkoutModal).toBeInTheDocument();\r\n\r\n    // Add more specific assertions as needed based on the content inside the modal\r\n    expect(screen.getByText('Checkout')).toBeInTheDocument();\r\n    expect(screen.getByLabelText('Full Name')).toBeInTheDocument();\r\n    // ... other assertions for form elements, buttons, etc.\r\n  });\r\n\r\n  it('submits order when the form is submitted', () => {\r\n    // Mock necessary functions and context values\r\n    const mockCartValue = {\r\n      items: [], // Mock items as needed for your test\r\n      addItem: jest.fn(),\r\n      removeItem: jest.fn(),\r\n      clearCart: jest.fn(),\r\n    };\r\n\r\n    const mockUserProgressValue = {\r\n      progress: 'checkout',\r\n      hideCheckout: jest.fn(),\r\n      orderSuccess: jest.fn(),\r\n    };\r\n\r\n    render(\r\n      <CartContext.Provider value={mockCartValue}>\r\n        <UserProgressContext.Provider value={mockUserProgressValue}>\r\n          <Checkout />\r\n        </UserProgressContext.Provider>\r\n      </CartContext.Provider>\r\n    );\r\n\r\n    // Simulate filling out the form and submitting it\r\n    fireEvent.change(screen.getByLabelText('Full Name'), { target: { value: 'John Doe' } });\r\n    // ... fill out other form fields as needed\r\n\r\n    fireEvent.click(screen.getByText('Submit Order'));\r\n\r\n    // Expectations after submitting the form, e.g., API call, cart clearing, etc.\r\n    // Mock API calls using jest.fn() and assert that they were called appropriately\r\n    // Assert that cart is cleared after the order submission\r\n    expect(mockCartValue.clearCart).toHaveBeenCalled();\r\n\r\n    // Assert that the orderSuccess function from UserProgressContext was called\r\n    expect(mockUserProgressValue.orderSuccess).toHaveBeenCalled();\r\n  });\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}